package group7.anemone.CPPN;

import java.util.ArrayList;

import group7.anemone.MNetwork.MFactory;
import group7.anemone.MNetwork.MNetwork;
import group7.anemone.MNetwork.MNeuron;
import group7.anemone.MNetwork.MNeuronParams;
import group7.anemone.MNetwork.MNeuronState;
import group7.anemone.MNetwork.MSynapse;
import group7.anemone.MNetwork.MVec3f;
import group7.anemone.HyperNeatGenetics.Chromosome;
import group7.anemone.CPPN.CPPN;

/**
 * A factory that will take in the CPPN's generated by an agents genome,
 * create a brain out of them,
 * and then return the brain once all CPPN's have been input
 *
 */

public class CPPNFactory {
	
	//These arrayLists will hold the nodes and synapse of an agents brain as it is gradually built up
	private ArrayList<MNeuron> neurons = new ArrayList<MNeuron>();
	private ArrayList<MSynapse> synapse = new ArrayList<MSynapse>();
	
	//Designates how many output nodes need to be appended to the end of the neuron list and linked up before the brain is returned to the agent
	private int outputNodes=0;
	private int inputNodes = 0;
	
	//Used to keep track of how many neurons were in the previous layer that should be linked to the next layer of neurons.
	private int previousLayerIndex =0;
	
	//The delay for each neuron. Should this be 0 all the time? How else can we modify it?
	private int delay = 0;
	
	//A factory to create initial parameters for the neurons
	MFactory mFactory = new MFactory();
	
	int neuronID = 0;

	public MNetwork createNetworkFromChromosome(Chromosome chromosome, int layerSize) {
		MNeuronParams stdParams = MFactory.createRSNeuronParams();
		int numLayers = chromosome.getSize()/2;
		CPPNSimulation buildSynapse, buildNeuron;
		CPPN cppn;

		/* Create output neurons. */
		for (int i=0; i<outputNodes; i++) {
			//Create a default set of parameters for the brain.
			MNeuronParams tempParam = MFactory.createRSNeuronParams();
			
			//Create a default state for the neuron to exist when created
			MNeuronState tempState = MFactory.createInitialRSNeuronState();
			
			//Create the node, and then pass it into the arraylist at the end
			neurons.add(new MNeuron(tempParam,tempState,neuronID));

			neuronID++;
		}

		/* Create input neurons. */
		for (int i=0; i<inputNodes; i++) {
			//Create a default set of parameters for the brain.
			MNeuronParams tempParam = MFactory.createRSNeuronParams();
			
			//Create a default state for the neuron to exist when created
			MNeuronState tempState = MFactory.createInitialRSNeuronState();
			
			//Create the node, and then pass it into the arraylist at the end
			neurons.add(new MNeuron(tempParam,tempState,neuronID));

			neuronID++;
		}

		/* Create hidden neurons. */
		for (int i=0; i<numLayers; i++) {
			cppn = chromosome.getNeuronCPPN(i);

			for (int n=0; n<layerSize; n++) {
				buildNeuron = new CPPNSimulation(cppn.getNodes());

				//Create a set of parameters for the brain.
				double a = stdParams.a + 0.01*buildNeuron.query(n/(double)layerSize-0.5*layerSize, 1.0/7.0-0.5*0.7);
				double b = stdParams.b + 0.01*buildNeuron.query(n/(double)layerSize-0.5*layerSize, 2.0/7.0-0.5*0.7);
				double c = stdParams.c + 0.01*buildNeuron.query(n/(double)layerSize-0.5*layerSize, 3.0/7.0-0.5*0.7);
				double d = stdParams.d + 0.01*buildNeuron.query(n/(double)layerSize-0.5*layerSize, 4.0/7.0-0.5*0.7);
				double tau = stdParams.tau + 0.01*buildNeuron.query(n/(double)layerSize-0.5*layerSize, 5.0/7.0-0.5*0.7);
				double ap = stdParams.ap + 0.01*buildNeuron.query(n/(double)layerSize-0.5*layerSize, 6.0/7.0-0.5*0.7);
				double am = stdParams.am + 0.01*buildNeuron.query(n/(double)layerSize-0.5*layerSize, 7.0/7.0-0.5*0.7);
				
				/* Set default neuron coordinates. */
				MVec3f spatialCoords = new MVec3f(0, 0, 0);
				
				MNeuronParams tempParam = new MNeuronParams(a,b,c,d,tau,ap,am,true,spatialCoords);

				//Create a default state for the neuron to exist when created
				MNeuronState tempState = MFactory.createInitialRSNeuronState();
				
				//Create the node, and then pass it into the arraylist at the end
				neurons.add(new MNeuron(tempParam,tempState,neuronID));
				
				neuronID++;
			}
		}

		/* Wire the input neurons to the first layer of neurons. */
		for (int preNid=0; preNid<inputNodes; preNid++) {
			for (int postNid=0; postNid<layerSize; postNid++) {
				MNeuron pre = neurons.get(outputNodes+preNid);
				MNeuron post = neurons.get(inputNodes+outputNodes+postNid);

				MSynapse s = new MSynapse(pre, post, 20.0, 1);
				
				ArrayList<MSynapse> postSyns = pre.getPostSynapses();
				postSyns.add(s);
				pre.setPostSynapses(postSyns);

				ArrayList<MSynapse> preSyns = post.getPreSynapses();
				preSyns.add(s);
				post.setPreSynapses(preSyns);

				synapse.add(s);
			}
		}

		/* Create the hidden layer synapses. */
		for (int i=0; i<numLayers-1; i++) {
			cppn = chromosome.getSynapseCPPN(i);
			buildSynapse = new CPPNSimulation(cppn.getNodes());

			for (int preNid=0; preNid<layerSize; preNid++) {
				for (int postNid=0; postNid<layerSize; postNid++) {
					MNeuron pre = neurons.get(inputNodes+outputNodes+layerSize*i+preNid);
					MNeuron post = neurons.get(inputNodes+outputNodes+layerSize*(i+1)+postNid);

					MSynapse s = new MSynapse(pre, post, 20.0 +
						buildSynapse.query(preNid/(double)layerSize-0.5*layerSize,
							postNid/(double)layerSize-0.5*layerSize), 1);

					ArrayList<MSynapse> postSyns = pre.getPostSynapses();
					postSyns.add(s);
					pre.setPostSynapses(postSyns);

					ArrayList<MSynapse> preSyns = post.getPreSynapses();
					preSyns.add(s);
					post.setPreSynapses(preSyns);

					synapse.add(s);
				}
			}
		}

		/* Wire the last layer to the output neurons. */
		cppn = chromosome.getSynapseCPPN(numLayers-1);
		buildSynapse = new CPPNSimulation(cppn.getNodes());

		for (int preNid=0; preNid<layerSize; preNid++) {
			for (int postNid=0; postNid<outputNodes; postNid++) {
				MNeuron pre = neurons.get(neurons.size()-preNid-1);
				MNeuron post = neurons.get(postNid);

				MSynapse s = new MSynapse(pre, post, 20.0 +
					buildSynapse.query(preNid/(double)layerSize-0.5*layerSize,
						postNid/(double)outputNodes-0.5*outputNodes), 1);
				
				ArrayList<MSynapse> postSyns = pre.getPostSynapses();
				postSyns.add(s);
				pre.setPostSynapses(postSyns);

				ArrayList<MSynapse> preSyns = post.getPreSynapses();
				preSyns.add(s);
				post.setPreSynapses(preSyns);

				synapse.add(s);
			}
		}

		return new MNetwork(neurons, synapse);
	}
	
	public CPPNFactory(int inputNodes, int outNodes) {
		this.inputNodes = inputNodes;
		
		outputNodes = outNodes;
	}
	
	public void neuronCPPN(CPPNSimulation buildNeuron, int layerSize) {
		MNeuronParams stdParams = MFactory.createRSNeuronParams();

		for (int x=0; x<layerSize; x++) {
			//Create a set of parameters for the brain.
			double a = stdParams.a + buildNeuron.query(neuronID, 1);
			double b = stdParams.b + buildNeuron.query(neuronID, 2);
			double c = stdParams.c + buildNeuron.query(neuronID, 3);
			double d = stdParams.d + buildNeuron.query(neuronID, 4);
			double tau = stdParams.tau + buildNeuron.query(neuronID, 5);
			double ap = stdParams.ap + buildNeuron.query(neuronID, 6);
			double am = stdParams.am + buildNeuron.query(neuronID, 7);
			
			/* Set default neuron coordinates. */
			MVec3f spatialCoords = new MVec3f(0, 0, 0);
			
			MNeuronParams tempParam = new MNeuronParams(a,b,c,d,tau,ap,am,true,spatialCoords);

			//Create a default state for the neuron to exist when created
			MNeuronState tempState = MFactory.createInitialRSNeuronState();
			
			//Create the node, and then pass it into the arraylist at the end
			neurons.add(new MNeuron(tempParam,tempState,neuronID));
			
			neuronID++;
		}
	}
	
	public void synapseCPPN(CPPNSimulation buildSynapse, int layerSize) {
		//For the number of neurons in this layer, create links for each
		for (int x=0; x<layerSize; x++) {
			//Create a synapse for the current neuron to all of the neurons in the previous layer
			//Upper limit is the total amount of neurons in the array, minus those that have already been appended to the list earlier in this loop.
			for (int y=previousLayerIndex; y<neurons.size()-(x+1);y++) {
				//Gets the index of the latest neuron placed in the arraylist, i.e. the one made in this loop
				int currentNeuronIndex = neurons.size()-1;
				
				//Craete synapse for this neuron, connecting it to a neuron in the previous layer.
				MSynapse tempSynapse = new MSynapse(neurons.get(currentNeuronIndex),neurons.get(y),buildSynapse.query(x, y), delay);
				
				//For the current neuron set the preSynapse to point to this new synapse
				neurons.get(currentNeuronIndex).addPreSynapse(tempSynapse);;
				
				//For the previous neuron, set the postSynapse to point to this new synapse
				neurons.get(y).addPostSynapse(tempSynapse);
				
				//Add this synapse to the synapse arraylist
				synapse.add(tempSynapse);
				
				//TODO: Could just allocate this at the end rather than incrementing each time for a negligible increase in efficiency
				previousLayerIndex++;
			}
		}
	}
	
	public void addInputNode() {
		//Create a default set of parameters for the brain.
		MNeuronParams tempParam = MFactory.createRSNeuronParams();
		
		//Create a default state for the neuron to exist when created
		MNeuronState tempState = MFactory.createInitialRSNeuronState();
		
		//Adds an input node to the start of the neuron list.
		neurons.add(new MNeuron(tempParam, tempState, neuronID));
		neuronID++;
	}
	
	public void addOutputNode() {
		//Create a default set of parameters for the brain.
		MNeuronParams tempParam = MFactory.createRSNeuronParams();
		
		//Create a default state for the neuron to exist when created
		MNeuronState tempState = MFactory.createInitialRSNeuronState();
		
		//Create the node, and then pass it into the arraylist at the end
		neurons.add(new MNeuron(tempParam,tempState,neuronID));
		
		//Create a synapse for the current neuron to all of the neurons in the previous layer
		//Upper limit is the total amount of neurons in the array, minus those that have already been appended to the list earlier in this loop.
		for (int y=previousLayerIndex; y<neurons.size()-1;y++) {
			//Gets the index of the latest neuron placed in the arraylist, i.e. the one made in this loop
			int currentNeuronIndex = neurons.size()-1;
			
			//Craete synapse for this neuron, connecting it to a neuron in the previous layer.
			MSynapse tempSynapse = new MSynapse(neurons.get(currentNeuronIndex),neurons.get(y),1, delay);
			
			//For the current neuron set the preSynapse to point to this new synapse
			neurons.get(currentNeuronIndex).addPreSynapse(tempSynapse);
			
			//For the previous neuron, set the postSynapse to point to this new synapse
			neurons.get(y).addPostSynapse(tempSynapse);
			
			//Add this synapse to the synapse arraylist
			synapse.add(tempSynapse);
			
			//TODO: Could just allocate this at the end rather than incrementing each time for a negligible increase in efficiency
			previousLayerIndex++;
		}
		neuronID++;
	}
	
	public MNetwork getBrain() {
		for (int y=0; y<outputNodes; y++) {
			addOutputNode();
		}
		
		MNetwork output = new MNetwork(neurons, synapse);
		
		return output;
	}

}
