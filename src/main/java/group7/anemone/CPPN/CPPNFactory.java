package group7.anemone.CPPN;

import java.util.ArrayList;

import group7.anemone.MNetwork.MFactory;
import group7.anemone.MNetwork.MNetwork;
import group7.anemone.MNetwork.MNeuron;
import group7.anemone.MNetwork.MNeuronParams;
import group7.anemone.MNetwork.MNeuronState;
import group7.anemone.MNetwork.MSynapse;

/**
 * A factory that will take in the CPPN's generated by an agents genome,
 * create a brain out of them,
 * and then return the brain once all CPPN's have been input
 * @author Sebastian Marson
 *
 */

public class CPPNFactory {
	
	//These arrayLists will hold the nodes and synapse of an agents brain as it is gradually built up
	private ArrayList<MNeuron> neurons = new ArrayList<MNeuron>();
	private ArrayList<MSynapse> synapse = new ArrayList<MSynapse>();
	
	private MNetwork brain = new MNetwork(neurons, synapse);
	
	//A factory to create initial parameters for the neurons
	MFactory mFactory = new MFactory();
	
	public void inputCPPN(CPPNSimulation buildSynapse, int layerSize) {
		/** 
		 * 
		 */
		
		//WTF IS THE NEURON ID? HOW DO WE MAKE IT? AND OTHER QUESTIONS LIKE THAT
		//HOW SHOULD WE DECIDE DELAY? CPPN? CONSTANT?
		//TODO: SOLVE ABOVE QUESTIONS
		int tempID =0;
		int delay = 0;
		
		int previousLayerIndex =0;
		
		//For the number of neurons in this layer, create a standard neuron
		for (int x=0; x<layerSize; x++) {
			//Query the simulation passed in, and save the returned parameters
			MNeuronParams tempParam = mFactory.createRSNeuronParams();
			
			//Create a default state for the neuron to exist when created
			MNeuronState tempState = mFactory.createInitialRSNeuronState();
			
			//Create the node, and then pass it into the arraylist at the end
			neurons.add(new MNeuron(tempParam,tempState,tempID));
			
			//Create a synapse for the current neuron to all of the neurons in the previous layer
			for (int y=previousLayerIndex; y<neurons.size()-layerSize;y++) {
				int currentNeuronIndex = neurons.size()-1;
				MSynapse tempSynapse = new MSynapse(neurons.get(currentNeuronIndex),neurons.get(y),buildSynapse.query(x, y), delay);
				
				//For the current neuron set the preSynapse to point to this new synapse
				neurons.get(currentNeuronIndex).addPreSynapse(tempSynapse);;
				
				//For the previous neuron, set the postSynapse to point to this new synapse
				neurons.get(y).addPostSynapse(tempSynapse);
			}
		}
	}
	
	public MNetwork getBrain() {
		MNetwork output = new MNetwork(neurons, synapse);
		
		return output;
	}

}
