package group7.anemone.CPPN;

import java.util.ArrayList;

import group7.anemone.MNetwork.MFactory;
import group7.anemone.MNetwork.MNetwork;
import group7.anemone.MNetwork.MNeuron;
import group7.anemone.MNetwork.MNeuronParams;
import group7.anemone.MNetwork.MNeuronState;
import group7.anemone.MNetwork.MSynapse;

/**
 * A factory that will take in the CPPN's generated by an agents genome,
 * create a brain out of them,
 * and then return the brain once all CPPN's have been input
 *
 */

public class CPPNFactory {
	
	//These arrayLists will hold the nodes and synapse of an agents brain as it is gradually built up
	private ArrayList<MNeuron> neurons = new ArrayList<MNeuron>();
	private ArrayList<MSynapse> synapse = new ArrayList<MSynapse>();
	
	private MNetwork brain = new MNetwork(neurons, synapse);
	
	//Designates how many output nodes need to be appended to the end of the neuron list and linked up before the brain is returned to the agent
	private int outputNodes=0;
	
	//Used to keep track of how many neurons were in the previous layer that should be linked to the next layer of neurons.
	private int previousLayerIndex =0;
	
	//The delay for each neuron. Should this be 0 all the time? How else can we modify it?
	private int delay = 0;
	
	//A factory to create initial parameters for the neurons
	MFactory mFactory = new MFactory();
	
	int neuronID = 0;
	
	public CPPNFactory(int inputNodes, int outNodes) {
		for (int x=0; x<inputNodes;x++) {
			addInputNode();
		}
		
		outputNodes = outNodes;
	}
	
	public void inputCPPN(CPPNSimulation buildSynapse, int layerSize) {
		//For the number of neurons in this layer, create a standard neuron
		for (int x=0; x<layerSize; x++) {
			//Create a default set of parameters for the brain.
			MNeuronParams tempParam = mFactory.createRSNeuronParams();
			
			//Create a default state for the neuron to exist when created
			MNeuronState tempState = mFactory.createInitialRSNeuronState();
			
			//Create the node, and then pass it into the arraylist at the end
			neurons.add(new MNeuron(tempParam,tempState,neuronID));
			
			//Create a synapse for the current neuron to all of the neurons in the previous layer
			//Upper limit is the total amount of neurons in the array, minus those that have already been appended to the list earlier in this loop.
			for (int y=previousLayerIndex; y<neurons.size()-(x+1);y++) {
				//Gets the index of the latest neuron placed in the arraylist, i.e. the one made in this loop
				int currentNeuronIndex = neurons.size()-1;
				
				//Craete synapse for this neuron, connecting it to a neuron in the previous layer.
				MSynapse tempSynapse = new MSynapse(neurons.get(currentNeuronIndex),neurons.get(y),buildSynapse.query(x, y), delay);
				
				//For the current neuron set the preSynapse to point to this new synapse
				neurons.get(currentNeuronIndex).addPreSynapse(tempSynapse);;
				
				//For the previous neuron, set the postSynapse to point to this new synapse
				neurons.get(y).addPostSynapse(tempSynapse);
				
				//Add this synapse to the synapse arraylist
				synapse.add(tempSynapse);
				
				//TODO: Could just allocate this at the end rather than incrementing each time for a negligible increase in efficiency
				previousLayerIndex++;
			}
		}
		neuronID++;
	}
	
	public void addInputNode() {
		//Create a default set of parameters for the brain.
		MNeuronParams tempParam = mFactory.createRSNeuronParams();
		
		//Create a default state for the neuron to exist when created
		MNeuronState tempState = mFactory.createInitialRSNeuronState();
		
		//Adds an input node to the start of the neuron list.
		neurons.add(new MNeuron(tempParam, tempState, neuronID));
		neuronID++;
	}
	
	public void addOutputNode() {
		//Create a default set of parameters for the brain.
		MNeuronParams tempParam = mFactory.createRSNeuronParams();
		
		//Create a default state for the neuron to exist when created
		MNeuronState tempState = mFactory.createInitialRSNeuronState();
		
		//Create the node, and then pass it into the arraylist at the end
		neurons.add(new MNeuron(tempParam,tempState,neuronID));
		
		//Create a synapse for the current neuron to all of the neurons in the previous layer
		//Upper limit is the total amount of neurons in the array, minus those that have already been appended to the list earlier in this loop.
		for (int y=previousLayerIndex; y<neurons.size()-1;y++) {
			//Gets the index of the latest neuron placed in the arraylist, i.e. the one made in this loop
			int currentNeuronIndex = neurons.size()-1;
			
			//Craete synapse for this neuron, connecting it to a neuron in the previous layer.
			MSynapse tempSynapse = new MSynapse(neurons.get(currentNeuronIndex),neurons.get(y),1, delay);
			
			//For the current neuron set the preSynapse to point to this new synapse
			neurons.get(currentNeuronIndex).addPreSynapse(tempSynapse);;
			
			//For the previous neuron, set the postSynapse to point to this new synapse
			neurons.get(y).addPostSynapse(tempSynapse);
			
			//Add this synapse to the synapse arraylist
			synapse.add(tempSynapse);
			
			//TODO: Could just allocate this at the end rather than incrementing each time for a negligible increase in efficiency
			previousLayerIndex++;
		}
		neuronID++;
	}
	
	public MNetwork getBrain() {
		for (int y=0; y<outputNodes; y++) {
			addOutputNode();
		}
		
		MNetwork output = new MNetwork(neurons, synapse);
		
		return output;
	}

}
